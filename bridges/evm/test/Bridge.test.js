const { expectRevert } = require("openzeppelin-test-helpers");
const Bridge = artifacts.require("BridgeMock");
const ReceiverMock = artifacts.require("ReceiverMock");

require("chai").should();

contract("Bridge", ([_, owner, alice, bob]) => {
  context("Checking oracle state relay (4 validators)", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner }
      );
    });

    it("should accept correct state relay (All signatures)", async () => {
      await this.bridge.relayOracleState(
        "46", // _blockHeight,
        "0xC2650A3B2CEE22FECB5A7A4DB2B17A7698D0E1C6D03FCCB423AFA050C3ACE32D", // _oracleIAVLStateHash
        "0x4DFB1C5ABBA9B649F03828E8DBE19DF818F599497F9A370DD514F93B8009F734", // _otherStoresMerkleHash
        "0xB3238075B0F786359DE6CDE3B1848C19F4998EC7B22F98BAD5E3266C5BB39807", // _supplyStoresMerkleHash
        [
          "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // subtreeVersionAndChainIdHash
          "0xD465F7F7BF5CF4B22767C9BE943AC822E9106D28CD80D25E2BCFF9CA5C03A230", // timeHash
          "0xAAE6B809E30668B53AB99BA69D605FB16E74ECBDDFC33ECB91A203754EFD78FB", // txCountAndLastBlockInfoHash
          "0xDEF482CDA986470C27374601EC716E9853DE47D72828AE0131CF8EF98E2972C5", // consensusDataHash
          "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
          "0x7F4BE7E5A1EB872AD44103360DDC190410331280C42A54D829A5D752C796685D", // evidenceAndProposerHash
        ],
        "0x6E0802112E0000000000000022480A20", // _signedDataPrefix
        [
          [
            "0xF5F2831EE0A9CE0C126F627037744A6F9966AE51434B77829E2988B52003468D", // r
            "0x6D60442B41A1150353AB3D8687FDD81BA51EB8DCD5FFDEF88912668F0F06BC1E", // s
            27, // v
            "0x12240A203A88B5657ABEF8D8CAB1AD0FB84C4796B1106E68F60B20EAFDE282B92E5270AF10012A0C0884F4E3F20510B0EBACE601320962616E64636861696E", // _signedDataSuffix
          ],
          [
            "0xAB0AFD1F7674D6AA12A0280B40D8A971EDC6691B9759E3EA4ADEB95C4E312E15", // r
            "0x4B98EAF0C989915D1C58DD0B9A493A7D3D9C2F53D6C7483389DE19062FE742CA", // s
            27, // v
            "0x12240A203A88B5657ABEF8D8CAB1AD0FB84C4796B1106E68F60B20EAFDE282B92E5270AF10012A0C0884F4E3F20510EC90D6EB01320962616E64636861696E", // _signedDataSuffix
          ],
          [
            "0xE2E24FD3CE6A046C45C9E82123173B75987F00CE76493FC63892AFCDDB6B4A18", // r
            "0x799AEB7D947659E458ED9DB8AA18E2731CBCCB62668F214E26D932851E409482", // s
            27, // v
            "0x12240A203A88B5657ABEF8D8CAB1AD0FB84C4796B1106E68F60B20EAFDE282B92E5270AF10012A0C0884F4E3F2051088B9C4D901320962616E64636861696E", // _signedDataSuffix
          ],
          [
            "0xD00816DFBD1B0F2766036DE5C312ABFB7AC24997D1F4B9013600CE40108B5A4E", // r
            "0x108D2E618A5E3DACBD12FA882B9CD415E3D476149B81D29C37B6658051DB797C", // s
            28, // v
            "0x12240A203A88B5657ABEF8D8CAB1AD0FB84C4796B1106E68F60B20EAFDE282B92E5270AF10012A0C0884F4E3F20510CCE8E1E801320962616E64636861696E", // _signedDataSuffix
          ],
        ]
      );
    });

    it("should accept correct state relay (validator power is more than 2/3)", async () => {
      await this.bridge.relayOracleState(
        "116", // _blockHeight,
        "0xA816762B08E353BEBA284980AB3B70AD49E82D87210A25B8B6D3E44E4176BEA9", // _oracleIAVLStateHash
        "0xE16097FC105B51A1D9E9747292A32BCBD540720C85641B1F3F433C4BA0857F27", // _otherStoresMerkleHash
        "0xC664FA54FAFD567978CE77CCFD50E3DDBA762428560A5EC81B832FC523F09D11", // _supplyStoresMerkleHash
        [
          "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // subtreeVersionAndChainIdHash
          "0x4B66E47C08D7E683E0CA50DCBA88E50E3AFBDBF093422CFFCC744FF1A3915FF6", // timeHash
          "0x1B9B36D6AB5080D28BB17B57EA5849A0EAEB627B85C569CC1A316BDFDC51C5C4", // txCountAndLastBlockInfoHash
          "0xDEF482CDA986470C27374601EC716E9853DE47D72828AE0131CF8EF98E2972C5", // consensusDataHash
          "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
          "0x0EFE3E12F46363C7779140D4CE659925DB52F19053E114D7CC4EFD666B37F79F", // evidenceAndProposerHash
        ],
        "0x6E080211740000000000000022480A20", // _signedDataPrefix
        [
          [
            "0xA12BD35761EF283073504AF0C7E14B2EBB1B4A1692DCEC1ACA22D0C5D40D4AEC", // r
            "0x6354DE9D9E0049ED701CAB266EA04E8C9B0ED0C5E11FC1C25AE7EDBBEC1B3DA3", // s
            27, // v
            "0x12240A20A16A17527AFDA8B3CC7EDE6E4A07446375E488FBEF828398FD807780319495A910012A0C08E1A7DFF20510DCFCAB9C03320962616E64636861696E", // _signedDataSuffix
          ],
          [
            "0xCD1E54B549BF2B29CA455187EA427159270BE0C4C1684BE7A06666EB7ED9EEB9", // r
            "0x59BB7676BACDC3ED61F14C5ADCC20DE94CEBE5A1CAA1867B53DAB54E945B617C", // s
            27, // v
            "0x12240A20A16A17527AFDA8B3CC7EDE6E4A07446375E488FBEF828398FD807780319495A910012A0C08E1A7DFF20510C8BEEBAB03320962616E64636861696E", // _signedDataSuffix
          ],
          [
            "0xCAA628BA2EEDDE0DAFCA9A7ADC5270FADEC2CF0204635CCF8086FD9AA45E0C17", // r
            "0x3F0C4BDC9C6580AD1D8276C7DB0CCFF69FF8124C6DD4C1FD794B93BD47693C9D", // s
            27, // v
            "0x12240A20A16A17527AFDA8B3CC7EDE6E4A07446375E488FBEF828398FD807780319495A910012A0C08E1A7DFF20510C8ADC7AB03320962616E64636861696E", // _signedDataSuffix
          ],
        ]
      );
    });

    it("should revert if sum of validator powers is less than 2/3)", async () => {
      await this.bridge.updateValidatorPowers(
        [["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 300]],
        { from: owner }
      );
      await expectRevert(
        this.bridge.relayOracleState(
          "46", // _blockHeight,
          "0xC2650A3B2CEE22FECB5A7A4DB2B17A7698D0E1C6D03FCCB423AFA050C3ACE32D", // _oracleIAVLStateHash
          "0x4DFB1C5ABBA9B649F03828E8DBE19DF818F599497F9A370DD514F93B8009F734", // _otherStoresMerkleHash
          "0xB3238075B0F786359DE6CDE3B1848C19F4998EC7B22F98BAD5E3266C5BB39807", // _supplyStoresMerkleHash
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // subtreeVersionAndChainIdHash
            "0xD465F7F7BF5CF4B22767C9BE943AC822E9106D28CD80D25E2BCFF9CA5C03A230", // timeHash
            "0xAAE6B809E30668B53AB99BA69D605FB16E74ECBDDFC33ECB91A203754EFD78FB", // txCountAndLastBlockInfoHash
            "0xDEF482CDA986470C27374601EC716E9853DE47D72828AE0131CF8EF98E2972C5", // consensusDataHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0x7F4BE7E5A1EB872AD44103360DDC190410331280C42A54D829A5D752C796685D", // evidenceAndProposerHash
          ],
          "0x6E0802112E0000000000000022480A20", // _signedDataPrefix
          [
            [
              "0xF5F2831EE0A9CE0C126F627037744A6F9966AE51434B77829E2988B52003468D", // r
              "0x6D60442B41A1150353AB3D8687FDD81BA51EB8DCD5FFDEF88912668F0F06BC1E", // s
              27, // v
              "0x12240A203A88B5657ABEF8D8CAB1AD0FB84C4796B1106E68F60B20EAFDE282B92E5270AF10012A0C0884F4E3F20510B0EBACE601320962616E64636861696E", // _signedDataSuffix
            ],
            [
              "0xAB0AFD1F7674D6AA12A0280B40D8A971EDC6691B9759E3EA4ADEB95C4E312E15", // r
              "0x4B98EAF0C989915D1C58DD0B9A493A7D3D9C2F53D6C7483389DE19062FE742CA", // s
              27, // v
              "0x12240A203A88B5657ABEF8D8CAB1AD0FB84C4796B1106E68F60B20EAFDE282B92E5270AF10012A0C0884F4E3F20510EC90D6EB01320962616E64636861696E", // _signedDataSuffix
            ],
            [
              "0xD00816DFBD1B0F2766036DE5C312ABFB7AC24997D1F4B9013600CE40108B5A4E", // r
              "0x108D2E618A5E3DACBD12FA882B9CD415E3D476149B81D29C37B6658051DB797C", // s
              28, // v
              "0x12240A203A88B5657ABEF8D8CAB1AD0FB84C4796B1106E68F60B20EAFDE282B92E5270AF10012A0C0884F4E3F20510CCE8E1E801320962616E64636861696E", // _signedDataSuffix
            ],
          ]
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES"
      );
    });

    it("should not accept out-of-order signatures", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "1160", // _blockHeight,
          "0xACAB016EC9FB3AA28A6A4BE8A364AEDAA9A42866E2957C5C267E340CE67C55EE", // _oracleIAVLStateHash
          "0x6ABB9CA0E0AC77A3B7C7F94D56E181DE954B92A19389829CE0E5A95B74BE0B7D", // _otherStoresMerkleHash
          "0x2726178BFFB0D462C15AB546DE7B4CA86588A98FF0F629DB7CA7E318AA61A846", // _supplyStoresMerkleHash
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // subtreeVersionAndChainIdHash
            "0x2157913D927F4249C52FAB326E9E0E83FACFAF167FA038A88173FA42ADF2452C", // timeHash
            "0x7EECC6A0EE0136DE143C92370E4BE8FA6F545C02C23DAFA62CC4AA0A14701787", // txCountAndLastBlockInfoHash
            "0xDEF482CDA986470C27374601EC716E9853DE47D72828AE0131CF8EF98E2972C5", // consensusDataHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0x0EFE3E12F46363C7779140D4CE659925DB52F19053E114D7CC4EFD666B37F79F", // evidenceAndProposerHash
          ],
          "0x6E080211880400000000000022480A20", // _signedDataPrefix
          [
            [
              "0xB88E0A2054A96A6775A9F5D1FA23B6FFA41274DD35C6431DAB0977F8CE4FB480", // r
              "0x3D759EFF85E17601624D560A8ACD70E782EA23B58C2E718FAC98EBF488750A86", // s
              28, // v
              "0x12240A20B0E9D07640EE2E758D01EA69E0733276D90946B0E7D11FE86067F97BAB1CC11B10012A0C08CBBAB8F00510B8C48F8902320962616E64636861696E", // _signedDataSuffix
            ],
            [
              "0x174505557E61260C06C7FD8962FF485BEBAD68E91B00C225452962B1FCBF1114", // r
              "0x39B37ACD1759D47B09D18C6C3144EAB5B2D2CA34347DC60A4D58B369730C0DB9", // s
              27, // v
              "0x12240A20B0E9D07640EE2E758D01EA69E0733276D90946B0E7D11FE86067F97BAB1CC11B10012A0C08CBBAB8F00510B8C48F8902320962616E64636861696E", // _signedDataSuffix
            ],
            [
              "0x17A66FF70C81C6A9C3040C1037CCC4EE9319E184D40956DC0DC30C1318901D36", // r
              "0x4A4C0C9BF150967CE25C724E613DF6BE0C401B84AA29DE8599963F52A7DFA940", // s
              27, // v
              "0x12240A20B0E9D07640EE2E758D01EA69E0733276D90946B0E7D11FE86067F97BAB1CC11B10012A0C08CBBAB8F00510B8C48F8902320962616E64636861696E", // _signedDataSuffix
            ],
            [
              "0x453498042685AB34C627B5652E2F1FAD839C21DB3CEE4E01822F00885F1E0321", // r
              "0x679781C8F2E3597ED3DF15E8E44B9CAF17D74894F0D4E22CD0F8C7CC1CB43963", // s
              27, // v
              "0x12240A20B0E9D07640EE2E758D01EA69E0733276D90946B0E7D11FE86067F97BAB1CC11B10012A0C08CBBAB8F00510B8C48F8902320962616E64636861696E", // _signedDataSuffix
            ],
          ]
        ),
        "INVALID_SIGNATURE_SIGNER_ORDER"
      );
    });

    it("should not accept invalid signature", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "1160", // _blockHeight,
          "0xACAB016EC9FB3AA28A6A4BE8A364AEDAA9A42866E2957C5C267E340CE67C55EE", // _oracleIAVLStateHash
          "0x6ABB9CA0E0AC77A3B7C7F94D56E181DE954B92A19389829CE0E5A95B74BE0B7D", // _otherStoresMerkleHash
          "0x2726178BFFB0D462C15AB546DE7B4CA86588A98FF0F629DB7CA7E318AA61A846", // _supplyStoresMerkleHash
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // subtreeVersionAndChainIdHash
            "0x2157913D927F4249C52FAB326E9E0E83FACFAF167FA038A88173FA42ADF2452C", // timeHash
            "0x7EECC6A0EE0136DE143C92370E4BE8FA6F545C02C23DAFA62CC4AA0A14701787", // txCountAndLastBlockInfoHash
            "0xDEF482CDA986470C27374601EC716E9853DE47D72828AE0131CF8EF98E2972C5", // consensusDataHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0x0EFE3E12F46363C7779140D4CE659925DB52F19053E114D7CC4EFD666B37F79F", // evidenceAndProposerHash
          ],
          "0x6E080211880400000000000022480A20", // _signedDataPrefix
          [
            [
              "0xE88E0A2054A96A6775A9F5D1FA23B6FFA41274DD35C6431DAB0977F8CE4FB480", // r INVALID HERE
              "0x3D759EFF85E17601624D560A8ACD70E782EA23B58C2E718FAC98EBF488750A86", // s
              28, // v
              "0x12240A20B0E9D07640EE2E758D01EA69E0733276D90946B0E7D11FE86067F97BAB1CC11B10012A0C08CBBAB8F00510B8C48F8902320962616E64636861696E", // _signedDataSuffix
            ],
            [
              "0x17A66FF70C81C6A9C3040C1037CCC4EE9319E184D40956DC0DC30C1318901D36", // r
              "0x4A4C0C9BF150967CE25C724E613DF6BE0C401B84AA29DE8599963F52A7DFA940", // s
              27, // v
              "0x12240A20B0E9D07640EE2E758D01EA69E0733276D90946B0E7D11FE86067F97BAB1CC11B10012A0C08CBBAB8F00510B8C48F8902320962616E64636861696E", // _signedDataSuffix
            ],
            [
              "0x453498042685AB34C627B5652E2F1FAD839C21DB3CEE4E01822F00885F1E0321", // r
              "0x679781C8F2E3597ED3DF15E8E44B9CAF17D74894F0D4E22CD0F8C7CC1CB43963", // s
              27, // v
              "0x12240A20B0E9D07640EE2E758D01EA69E0733276D90946B0E7D11FE86067F97BAB1CC11B10012A0C08CBBAB8F00510B8C48F8902320962616E64636861696E", // _signedDataSuffix
            ],
          ]
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES"
      );
    });
  });

  context("Checking data verification", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([]);
      await this.bridge.setOracleState(
        "46", // _blockHeight
        "0xC2650A3B2CEE22FECB5A7A4DB2B17A7698D0E1C6D03FCCB423AFA050C3ACE32D" // _oracleIAVLStateHash
      );
    });

    it("should not accept unrelayed block", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "9999", // _blockHeight
          "0x000000005E58F9E6000000005E58F9F30000000000000001000000000000000100000000000000016461746131", // _data
          "1", // _requestId
          "1", // _oracleScriptId
          "0x63616C6C64617461", // _params
          "36", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "36", // subtreeVersion
              "0xB181E1641589AFFC067E239E92CF07B6F1CEB13D5AA5B883F91BF62C70B0802E", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "36", // subtreeVersion
              "0xF65F8E790CBF4B6480B9ABE3AD2683AE27B631F46ABFF22E7B4996E2660040AC", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "7", // subtreeSize
              "36", // subtreeVersion
              "0x6F04DDDD55DFAA857B8D9A04D9E1FCA2B5B5259E8FFC58C04B8052F1114BC8A9", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "10", // subtreeSize
              "45", // subtreeVersion
              "0xEE5433A9AA1598E9B372176361063C5AF6FB4C3EA7A2162D0025F300498A4774", // siblingHash
            ],
          ]
        ),
        "NO_ORACLE_ROOT_STATE_DATA"
      );
    });

    // TODO: Make test work after implement
    // it("should accept correct data verification", async () => {
    //   (
    //     await this.bridge.verifyOracleData(
    //       "46", // _blockHeight
    //       "0x000000005E58F9E6000000005E58F9F30000000000000001000000000000000100000000000000016461746131", // _data
    //       "1", // _requestId
    //       "1", // _oracleScriptId
    //       "0x63616C6C64617461", // _params
    //       "36", // _version
    //       [
    //         [
    //           true, // isDataOnRight
    //           "1", // subtreeHeight
    //           "2", // subtreeSize
    //           "36", // subtreeVersion
    //           "0xB181E1641589AFFC067E239E92CF07B6F1CEB13D5AA5B883F91BF62C70B0802E", // siblingHash
    //         ],
    //         [
    //           true, // isDataOnRight
    //           "2", // subtreeHeight
    //           "3", // subtreeSize
    //           "36", // subtreeVersion
    //           "0xF65F8E790CBF4B6480B9ABE3AD2683AE27B631F46ABFF22E7B4996E2660040AC", // siblingHash
    //         ],
    //         [
    //           true, // isDataOnRight
    //           "3", // subtreeHeight
    //           "7", // subtreeSize
    //           "36", // subtreeVersion
    //           "0x6F04DDDD55DFAA857B8D9A04D9E1FCA2B5B5259E8FFC58C04B8052F1114BC8A9", // siblingHash
    //         ],
    //         [
    //           true, // isDataOnRight
    //           "4", // subtreeHeight
    //           "10", // subtreeSize
    //           "45", // subtreeVersion
    //           "0xEE5433A9AA1598E9B372176361063C5AF6FB4C3EA7A2162D0025F300498A4774", // siblingHash
    //         ],
    //       ]
    //     )
    //   )
    //     .toString()
    //     .should.eq(
    //       [1, 1582889446, 1582889459, 1, 1, 1, "0x63616c6c64617461", "0x6461746131"].toString()
    //     );
    // });

    it("should not accept invalid data verification", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "46", // _blockHeight
          "0x000000005E58F9E6000000005E58F9F30000000000000001000000000000000100000000000000019999999999", // _data WRONG HERE
          "1", // _requestId
          "1", // _oracleScriptId
          "0x63616C6C64617461", // _params
          "36", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "36", // subtreeVersion
              "0xB181E1641589AFFC067E239E92CF07B6F1CEB13D5AA5B883F91BF62C70B0802E", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "36", // subtreeVersion
              "0xF65F8E790CBF4B6480B9ABE3AD2683AE27B631F46ABFF22E7B4996E2660040AC", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "7", // subtreeSize
              "36", // subtreeVersion
              "0x6F04DDDD55DFAA857B8D9A04D9E1FCA2B5B5259E8FFC58C04B8052F1114BC8A9", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "10", // subtreeSize
              "45", // subtreeVersion
              "0xEE5433A9AA1598E9B372176361063C5AF6FB4C3EA7A2162D0025F300498A4774", // siblingHash
            ],
          ]
        ),
        "INVALID_ORACLE_DATA_PROOF"
      );
    });

    it("should not accept incomplete proof", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "46", // _blockHeight
          "0x000000005E58F9E6000000005E58F9F30000000000000001000000000000000100000000000000016461746131", // _data
          "1", // _requestId
          "1", // _oracleScriptId
          "0x63616C6C64617461", // _params
          "36", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "36", // subtreeVersion
              "0xB181E1641589AFFC067E239E92CF07B6F1CEB13D5AA5B883F91BF62C70B0802E", // siblingHash
            ],
          ]
        ),
        "INVALID_ORACLE_DATA_PROOF"
      );
    });
  });

  context("Relay and Verfiy data", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
      ]);

      this.receiver = await ReceiverMock.new(this.bridge.address);
    });

    // TODO: Add test after implementation complete
    // it("should accept valid relay and verify", async () => {
    //   await this.receiver.relayAndSafe(
    //     "0x
    //   );
    //   (await this.bridge.oracleStates(1086))
    //     .toString()
    //     .should.eq("0x1f8ccf68b355092fdf91b6b694edbebee5dad05e109c8160eb29462bdc995117");
    //   result = await this.receiver.latestResult();
    //   result[0].toString().should.eq("1");
    //   result[1].toString().should.eq("1584357141");
    //   result[2].toString().should.eq("1584357205");
    //   result[3].toString().should.eq("4");
    //   result[4].toString().should.eq("4");
    //   result[5].toString().should.eq("4");
    //   result[6].toString().should.eq("0x455448");
    //   result[7].toString().should.eq("0x0000000000002984");
    // });

    // it("should accept valid relay and verify case 2", async () => {
    //   await this.receiver.relayAndSafe(
    //     "0x
    //   );
    //   (await this.bridge.oracleStates(2162))
    //     .toString()
    //     .should.eq("0x3e71eb34c10e3df166273a80cb328bd9671e3b5039ba0ae5bfc0b4dcf7a67b19");
    //   result = await this.receiver.latestResult();
    //   result[0].toString().should.eq("1");
    //   result[1].toString().should.eq("1584357141");
    //   result[2].toString().should.eq("1584357203");
    //   result[3].toString().should.eq("4");
    //   result[4].toString().should.eq("1");
    //   result[5].toString().should.eq("2");
    //   result[6].toString().should.eq("0x425443");
    //   result[7].toString().should.eq("0x00000000000720eb");
    // });

    // it("should revert invalid relay and verify", async () => {
    //   await expectRevert(
    //     this.receiver.relayAndSafe(
    //       "0x
    //     ),
    //     "RELAY_ORACLE_STATE_FAILED."
    //   );
    // });
  });

  context("Update provider powers", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner }
      );
    });

    it("should revert if update validator power by non-onwer", async () => {
      await expectRevert(
        this.bridge.updateValidatorPowers([["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]], {
          from: alice,
        }),
        "Ownable: caller is not the owner."
      );
    });

    it("should update a validator power", async () => {
      await this.bridge.updateValidatorPowers(
        [["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]],
        { from: owner }
      );

      (await this.bridge.validatorPowers("0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5"))
        .toString()
        .should.eq("150");

      (await this.bridge.totalValidatorPower()).toString().should.eq("450");
    });

    it("should update validator powers", async () => {
      await this.bridge.updateValidatorPowers(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 0],
          ["0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f", 200],
        ],
        { from: owner }
      );

      (await this.bridge.validatorPowers("0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5"))
        .toString()
        .should.eq("150");

      (await this.bridge.validatorPowers("0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE"))
        .toString()
        .should.eq("0");

      (await this.bridge.validatorPowers("0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f"))
        .toString()
        .should.eq("200");

      (await this.bridge.totalValidatorPower()).toString().should.eq("550");
    });
  });
});
